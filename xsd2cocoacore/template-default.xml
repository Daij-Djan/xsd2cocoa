<template xmlns="http://www.example.com/xsd2cocoa"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.example.com/xsd2cocoa template.xsd">
    <!-- <prefix_override for="namespace" to="DDXSDGenerated"/> -->
    
    <simpletype name="string" objType="NSString" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
          {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
          _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];</value>
		</read>
	</simpletype>
    <simpletype name="anyURI" objType="NSURL" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSURL URLWithString:[NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSURL URLWithString:[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% else %}[{{ element.variableName }}Array addObject: [NSURL URLWithString:[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [NSURL URLWithString:[NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding]];</value>
		</read>
	</simpletype>
	<simpletype name="boolean" objType="NSNumber" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSNumber numberWithBool: [[NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding] isEqualToString: @"true"]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
          self.{{ element.variableName }} = [NSNumber numberWithBool: [[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding] isEqualToString: @"true"]];
          _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [NSNumber numberWithBool: [[NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding] isEqualToString: @"true"]];</value>
		</read>
	</simpletype>
	<simpletype name="int" objType="NSNumber" arrayType="NSArray">
		<read>
			<prefix>NSNumberFormatter* intFormatter = [[NSNumberFormatter alloc] init];
    intFormatter.numberStyle = NSNumberFormatterDecimalStyle;</prefix>
			<attribute>self.{{ attribute.variableName }} = [intFormatter numberFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
          self.{{ element.variableName }} = [intFormatter numberFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];
          _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [intFormatter numberFromString: [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding]];</value>
		</read>
	</simpletype>
    <simpletype name="integer" objType="NSNumber" arrayType="NSArray">
		<read>
			<prefix>NSNumberFormatter* numFormatter = [[NSNumberFormatter alloc] init];
    numFormatter.numberStyle = NSNumberFormatterDecimalStyle;</prefix>
			<attribute>self.{{ attribute.variableName }} = [numFormatter numberFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                self.{{ element.variableName }} = [numFormatter numberFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [numFormatter numberFromString: [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding]];</value>
		</read>
	</simpletype>
	<simpletype name="decimal" objType="NSNumber" arrayType="NSArray">
		<read>
			<prefix>NSNumberFormatter* decFormatter = [[[NSNumberFormatter alloc] init];
    decFormatter.decimalSeparator = @".";
    decFormatter.numberStyle = NSNumberFormatterDecimalStyle;</prefix>
			<attribute>self.{{ attribute.variableName }} = [decFormatter numberFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                self.{{ element.variableName }} = [decFormatter numberFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [decFormatter numberFromString: [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding]];</value>
		</read>
	</simpletype>
	<simpletype name="dateTime" objType="NSDate" arrayType="NSArray">
		<read>
			<prefix>NSDateFormatter* dateFormatter = [[NSDateFormatter alloc] init];
    dateFormatter.timeStyle = NSDateFormatterFullStyle;
    dateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ssZ";</prefix>
			<attribute>self.{{ attribute.variableName }} = [dateFormatter dateFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [dateFormatter dateFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% else %}[{{ element.variableName }}Array addObject: [dateFormatter dateFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]]];{% /if %}
          _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [dateFormatter dateFromString: [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding]];</value>
		</read>
	</simpletype>
    
    <!--specific types-->
	<simpletype name="stringId" objType="NSString" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[self.{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
			<value>self.value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];</value>
		</read>
	</simpletype>
	<simpletype name="functionNames" objType="NSString" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[self.{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
			<value>self.value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];</value>
		</read>
	</simpletype>
	<simpletype name="featuresName" objType="NSString" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[self.{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
			<value>self.value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];</value>
		</read>
	</simpletype>
    <simpletype name="isoCode" objType="NSString" arrayType="NSArray">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[self.{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>self.value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];</value>
		</read>
	</simpletype>
    
    <!--complex type-->
    <complextype arrayType="DDFilterableArray">
        <read>
            <element><![CDATA[{% if element.isSingleValue %}self.{{ element.variableName }} = [[{{ element.objcType }} alloc] initWithReader: reader];{% else %}[{{ element.variableName }}Array addObject: [[{{ element.schemaType.targetClassName }} alloc] initWithReader: reader]];{% /if %}]]></element>
        </read>
    </complextype>

    <implementation>
        <header><![CDATA[
#import <Foundation/Foundation.h>
#import <libxml/xmlreader.h>

{% if type.hasComplexBaseClass %}#import "{{ type.baseClassName }}.h"{% /if %}

{% for complexType in type.complexTypesInUse %}@class {{ complexType.targetClassName }};
{% /for %}

@interface {{ type.targetClassName }} : {% if type.hasComplexBaseClass %}{{ type.baseClassName }}{% else %}NSObject{% /if %}
{% for attribute in type.attributes %}
@property (nonatomic, readonly) {{ attribute.objcType }}* {{ attribute.variableName }};
{% /for %}
{% for element in type.elements %}@property (nonatomic, readonly) {{ element.objcType }}* {{ element.variableName }};
{% /for %}
{% if type.hasSimpleBaseClass %}
@property (nonatomic, readonly) {{ type.baseClassName }}* value;{% /if %}
@property (nonatomic, readonly) NSDictionary* dictionary;

- (id) initWithReader: (xmlTextReaderPtr) reader;
@end

@interface {{ type.targetClassName }} (Subclassing)
- (void) readAttributes: (xmlTextReaderPtr) reader;
@end
	]]></header>
	<class><![CDATA[
#import "{{ type.targetClassName }}.h"

{% for complexType in type.complexTypesInUse %}#import "{{ complexType.targetClassName }}.h"
{% /for %}

@interface {{ type.targetClassName }} ()
{% for attribute in type.attributes %}
@property (nonatomic, readwrite) {{ attribute.objcType }}* {{ attribute.variableName }};
{% /for %}
{% for element in type.elements %}@property (nonatomic, readwrite) {{ element.objcType }}* {{ element.variableName }};
{% /for %}
{% if type.hasSimpleBaseClass %}
@property (nonatomic, readwrite) {{ type.baseClassName }}* value;{% /if %}

@end

@implementation {{ type.targetClassName }} 
 
- (void) readAttributes: (xmlTextReaderPtr) reader {{% if type.hasComplexBaseClass %}
  [super readAttributes: reader];{% /if %}{% for simpleType in type.simpleTypesInUse %}{{ simpleType.readPrefixCode }}{% /for %}
{% for attribute in type.attributes %}  char* {{ attribute.name }}AttrValue = (char*) xmlTextReaderGetAttribute(reader, (xmlChar*)"{{ attribute.name }}");
  if({{ attribute.name }}AttrValue) {
    {{ attribute.readTemplate }}
//    NSLog( @"%@", self.{{ attribute.variableName }});
  }
{% /for %}}

- (id) initWithReader: (xmlTextReaderPtr) reader {

  int _complexTypeXmlDept = xmlTextReaderDepth(reader);
  {% if type.hasComplexBaseClass %}self = [super initWithReader: reader];{% else %}self = [super init];{% /if %}
  if(self) {{% for simpleType in type.simpleTypesInUse %}
    {{ simpleType.readPrefixCode }}{% /for %}{% if type.hasComplexBaseClass %}{% else %}
  [self readAttributes: reader];
{% /if %}{% for element in type.elements %}
    {% if element.isSingleValue %}{% else %}NSMutableArray *{{ element.variableName }}Array = [NSMutableArray array];{% /if %}{% /for %}

//    NSLog(@"Parsing %@", NSStringFromClass(self.class));

    {% if type.hasComplexBaseClass %}int _readerOk=1;{% else %}int _readerOk = xmlTextReaderRead(reader); assert(_readerOk==1);{% /if %}
    int _currentNodeType = xmlTextReaderNodeType(reader);
    int _currentXmlDept = xmlTextReaderDepth(reader);
    while(_currentNodeType != XML_READER_TYPE_NONE && _complexTypeXmlDept < _currentXmlDept) {
      if(_currentNodeType == XML_READER_TYPE_ELEMENT) {  
        NSString* _currentElementName = [NSString stringWithCString: (const char*) xmlTextReaderConstLocalName(reader) encoding:NSUTF8StringEncoding];
        {% for element in type.elements %}if([@"{{element.name}}" isEqualToString: _currentElementName]) {
          {{ element.readTemplate }}
        } else {% /for %} {% if type.hasSimpleBaseClass %} if([@"#text" isEqualToString: _currentElementName]){
              char* contentValue = (char*) xmlTextReaderConstValue(reader);
              if(contentValue) {
                  {{ type.readSimpleContent }}
              }
          } else {% /if %} {
          NSLog(@"Ignoring unexpected: %@", _currentElementName);
            break;
        }
      }
      
      _readerOk = xmlTextReaderRead(reader);
      assert(_readerOk==1);
      _currentNodeType = xmlTextReaderNodeType(reader);
      _currentXmlDept = xmlTextReaderDepth(reader);
    }
    {% for element in type.elements %}
    {% if element.isSingleValue %}{% else %}if({{ element.variableName }}Array.count) self.{{ element.variableName }} = {{ element.variableName }}Array;{% /if %}{% /for %}
  }
  return self;
}
 
- (NSDictionary*)dictionary {
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    {% if type.hasComplexBaseClass %}[dict setValuesForKeysWithDictionary:[super dictionary]];{% /if %}
{% for attribute in type.attributes %}
    if(self.{{ attribute.variableName }}) [dict setObject:self.{{ attribute.variableName }} forKey:@"{{ attribute.variableName }}"];{% /for %}
{% for element in type.elements %} 
    {% if element.hasComplexType %}
        if(self.{{ element.variableName }}) {
            NSDictionary *{{ element.variableName }}Dict = [self.{{ element.variableName }} valueForKeyPath:@"dictionary"];
            [dict setObject:{{ element.variableName }}Dict forKey:@"{{ element.variableName }}"];
            }
    {% else %} if(self.{{ element.variableName }}) [dict setObject:self.{{ element.variableName }} forKey:@"{{ element.variableName }}"];{% /if %}
{% /for %}
{% if type.hasSimpleBaseClass %}    if(self.value) [dict setObject:self.value forKey:@"value"];{% /if %}

    return dict;
}
 @end
	    ]]></class>
    </implementation>
	<reader>
	   <header><![CDATA[
#import <Foundation/Foundation.h>
#import <libxml/xmlreader.h>

#import "{{ type.targetClassName }}.h"

@interface {{ type.targetClassName }} (File)

+ ({{ type.targetClassName }}*){{ type.name }}FromURL:(NSURL*)url;
+ ({{ type.targetClassName }}*){{ type.name }}FromFile:(NSString*)path;
+ ({{ type.targetClassName }}*){{ type.name }}FromData:(NSData*)data;

@end
	]]></header>
	<class><![CDATA[
#import "{{ type.targetClassName }}+File.h"
        
@implementation {{ type.targetClassName }} (File)

+ ({{ type.targetClassName }}*){{ type.name }}FromURL:(NSURL*)url {
    {{ type.targetClassName }}* obj = nil;
    xmlTextReaderPtr reader = xmlReaderForFile( url.absoluteString.UTF8String,
                                               NULL,
                                               (XML_PARSE_NOBLANKS | XML_PARSE_NOCDATA | XML_PARSE_NOERROR | XML_PARSE_NOWARNING));
    if(reader != nil) {
        int ret = xmlTextReaderRead(reader);
        if(ret == XML_READER_TYPE_ELEMENT) {
            obj = [[{{ type.targetClassName }} alloc] initWithReader: reader];
        }
        xmlFreeTextReader(reader);
    }
    return obj;
}

+ ({{ type.targetClassName }}*){{ type.name }}FromFile:(NSString*)path {
    return [self {{ type.name }}FromURL:[NSURL fileURLWithPath:path]];
}

+ ({{ type.targetClassName }}*){{ type.name }}FromData:(NSData*)data {
    {{ type.targetClassName }}* obj = nil;
    xmlTextReaderPtr reader = xmlReaderForMemory([data bytes],
                                                 (int)[data length],
                                                 NULL,
                                                 NULL,
                                                 (XML_PARSE_NOBLANKS | XML_PARSE_NOCDATA | XML_PARSE_NOERROR | XML_PARSE_NOWARNING));
    if(reader != nil) {
        int ret = xmlTextReaderRead(reader);
        if(ret > 0) {
            obj = [[{{ type.targetClassName }} alloc] initWithReader: reader];
        }
        xmlFreeTextReader(reader);
    }
    return obj;        
}

@end
	]]></class>
    </reader>
</template>
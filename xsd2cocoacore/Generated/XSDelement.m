/*
 XSDelement.h
 The implementation of properties and methods for the XSDelement object.
 Generated by SudzC.com
 */
#import "XSDelement.h"
//#import "XSDlocalSimpleType.h"
//#import "XSDlocalComplexType.h"
#import "XSDcomplexType.h"
#import "XSDschema.h"
#import "XMLUtils.h"

//#import "XSDQName.h"
//#import "XSDstring.h"
//#import "XSDboolean.h"
//#import "XSDformChoice.h"
//#import "XSDderivationSet.h"
//#import "XSDblockSet.h"

@implementation XSDelement
//@synthesize simpleType = _simpleType;
@synthesize localComplexType;
@synthesize name = _name;
@synthesize type = _type;
@synthesize substitutionGroup = _substitutionGroup;
@synthesize defaultValue = _default;
@synthesize fixed = _fixed;
@synthesize nillable = _nillable;
@synthesize abstractValue = _abstract;
@synthesize final = _final;
@synthesize block = _block;
@synthesize form = _form;
@synthesize minOccurs;
@synthesize maxOccurs;

- (id) init
{
    if(self = [super init]) {
        //        self.simpleType = nil; // [[XSDlocalSimpleType alloc] init];
        self.localComplexType = nil; // [[XSDlocalComplexType alloc] init];
        self.type = nil; // [[XSDanySimpleType alloc] init];
        self.name = nil;
        self.substitutionGroup = nil; // [[XSDanySimpleType alloc] init];
        self.defaultValue = nil; // [[XSDanySimpleType alloc] init];
        self.fixed = nil; // [[XSDanySimpleType alloc] init];
        self.nillable = nil; // [[XSDanySimpleType alloc] init];
        self.abstractValue = nil; // [[XSDanySimpleType alloc] init];
        self.final = nil; // [[XSDanySimpleType alloc] init];
        self.block = nil; // [[XSDanySimpleType alloc] init];
        self.form = nil; // [[XSDanySimpleType alloc] init];
        self.minOccurs = nil;
        self.maxOccurs = nil;
    }
    return self;
}

- (id) initWithNode: (NSXMLElement*) node schema: (XSDschema*) schema {
    self = [super initWithSchema:schema];
    if(self) {
        //self.simpleType = [[[XSDlocalSimpleType alloc] initWithNode: [Soap getNode: node withName: @"simpleType"]] object];
        
        self.type = [XMLUtils node: node stringAttribute: @"type"];
        self.name = [XMLUtils node: node stringAttribute: @"name"];
        self.substitutionGroup = [XMLUtils node: node stringAttribute: @"substitutionGroup"];
        self.defaultValue = [XMLUtils node: node stringAttribute:  @"default"];
        self.fixed = [XMLUtils node: node stringAttribute: @"fixed"];
        self.nillable = [XMLUtils node: node stringAttribute: @"nillable"];
        self.abstractValue = [XMLUtils node: node stringAttribute: @"abstract"];
        self.final = [XMLUtils node: node stringAttribute: @"final"];
        self.block = [XMLUtils node: node stringAttribute: @"block"];
        self.form = [XMLUtils node: node stringAttribute: @"form"];
        
        NSNumberFormatter* numFormatter = [[NSNumberFormatter alloc] init];
        numFormatter.numberStyle = NSNumberFormatterDecimalStyle;
        
        NSString* minOccursValue = [XMLUtils node: node stringAttribute: @"minOccurs"];
        if(minOccursValue == nil) {
            self.minOccurs = [NSNumber numberWithInt: 1];
        } else if([minOccursValue isEqual: @"unbounded"]) {
            self.minOccurs = [NSNumber numberWithInt: -1];
        } else {
            self.minOccurs = [numFormatter numberFromString: minOccursValue];
        }
        NSString* maxOccursValue = [XMLUtils node: node stringAttribute: @"maxOccurs"];
        if(maxOccursValue == nil) {
            self.maxOccurs = [NSNumber numberWithInt: 1];
        } else if([maxOccursValue isEqual: @"unbounded"]) {
            self.maxOccurs = [NSNumber numberWithInt: -1];
        } else {
            self.maxOccurs = [numFormatter numberFromString: maxOccursValue];
        }
        
        if(self.type == nil) {
            NSXMLElement* complexTypeNode = [XMLUtils node: node childWithName: @"complexType"];
            if(complexTypeNode != nil) {
                self.localComplexType = [[XSDcomplexType alloc] initWithNode: complexTypeNode schema: schema];
                self.localComplexType.name = [self.name stringByReplacingCharactersInRange:NSMakeRange(0,1) withString:[[self.name substringToIndex:1] uppercaseString]];
                [schema addComplexType: self.localComplexType];
            }
        }
    }
    return self;
}

- (BOOL) hasComplexType {
    return (self.type != nil && [[self.schema typeForName:self.type] isKindOfClass:[XSDcomplexType class]]);
}

- (NSString*) objcType {
    if([self isSingleValue]) {
        if(self.type != nil) {
            return [[self.schema typeForName: self.type] targetClassName];
        } else {
            return [self.localComplexType targetClassName];
        }
    } else {
        return [[self.schema typeForName: self.type] arrayType];
    }
}

- (id<XSType>) schemaType {
    if(self.type != nil) {
        return [self.schema typeForName: self.type];
    } else {
        return self.localComplexType;
    }
}

- (NSString*) variableName {
    return [XSDschema variableNameFromName:self.name multiple:!self.isSingleValue];
}

- (NSString*) nameWithCapital {
    return [[self variableName] stringByReplacingCharactersInRange:NSMakeRange(0,1) withString:[[self.name substringToIndex:1] uppercaseString]];
}

- (NSString*) readTemplate {
    if(self.localComplexType != nil) {
        return [self.localComplexType readCodeForElement: self];
    } else {
        return [[self.schema typeForName: self.type] readCodeForElement: self];
    }
}

- (BOOL) isSingleValue {
    return [self.maxOccurs intValue] >= 0 && [self.maxOccurs intValue] <= 1;
}


//- (void) dealloc
//{
//    // if(self.simpleType != nil) { [self.simpleType release]; }
//    if(self.localComplexType != nil) { self.localComplexType; }
//    if(self.type != nil) { self.type; }
//    if(self.substitutionGroup != nil) { self.substitutionGroup; }
//    if(self.defaultValue != nil) { self.defaultValue; }
//    if(self.fixed != nil) { self.fixed; }
//    if(self.nillable != nil) { self.nillable; }
//    if(self.abstractValue != nil) { self.abstractValue; }
//    if(self.final != nil) { self.final; }
//    if(self.block != nil) { self.block; }
//    if(self.form != nil) { self.form; }
//}

@end

/*
 XSDattribute.h
 The implementation of properties and methods for the XSDattribute object.
 Generated by SudzC.com
 */
#import "XSDattribute.h"
#import "XSSchemaNode.h"
#import "XSDschema.h"
#import "XSType.h"
#import "XMLUtils.h"
#import "XSSimpleType.h"

@interface XSDattribute ()

@property (strong, nonatomic) NSString* name;
@property (strong, nonatomic) NSString* simpleType;
@property (strong, nonatomic) NSString* type;
@property (strong, nonatomic) id use;
@property (strong, nonatomic) NSString* defaultValue;
@property (strong, nonatomic) NSString* fixed;
@property (strong, nonatomic) NSString* form;

@end

@implementation XSDattribute

- (id) init
{
    if(self = [super init]) {
        self.name = nil;
        self.simpleType = nil; 
        self.type = nil; 
        self.defaultValue = nil; 
        self.fixed = nil; 
        self.form = nil; 
        
    }
    return self;
}


- (id) initWithNode: (NSXMLElement*) node schema: (XSDschema*) schema{
    if(self = [super initWithNode:node schema:schema]) {
        self.name = [XMLUtils node:node stringAttribute:@"name"];
        self.simpleType = [XMLUtils node:node stringAttribute:@"simpleType"];
        self.type = [XMLUtils node:node stringAttribute:@"type"];
        self.use = [XMLUtils node:node stringAttribute:@"use"];
        self.defaultValue = [XMLUtils node:node stringAttribute:@"default"];
        self.fixed = [XMLUtils node:node stringAttribute:@"fixed"];
        self.form = [XMLUtils node:node stringAttribute:@"form"];

        //specify string as default value
        if(!self.type) {
            NSLog(@"assign default tye xs:string to attribute %@", self.name);
            self.type = @"xs:string";
        }
    }
    return self;
}


- (NSString*) codeType {
    return [self.schemaType targetClassName];
}

- (NSString*) readCodeForAttribute {
    return [self.schemaType readCodeForAttribute: self];
}

- (NSString*) variableName {
    return [XSDschema variableNameFromName:self.name multiple:NO];
}

- (id<XSType>)schemaType {
    return [self.schema typeForName: self.type];
}

/*
 * Name:        hasEnumeration
 * Parameters:  None
 * Returns:     BOOL value that will equate to
 *              0 - NO - False.
 *              1 - YES - True
 * Description: Will check the current element to see if the element type is associated
 *              with an enumeration values.
 */
- (BOOL) hasEnumeration{
    BOOL isEnumeration = NO;
    
    /* Grab the type and check if it is of a simple type element */
    XSSimpleType* type = self.schemaType;
    if([type isKindOfClass:[XSSimpleType class]]) {
        /* ask the type */
        isEnumeration = [type hasEnumeration];
    }
    
    /* Return BOOL if we have enumerations */
    return isEnumeration;
}

@end

<template xmlns="http://www.example.com/xsd2cocoa"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.example.com/xsd2cocoa template.xsd">
    
    <additional_file path="libxml-bridging-header.header" target_path="libxml-bridging-header.h"/>
    
    <!-- known simpletypes-->
    <simpletype name="string" objType="String" arrayType="String[]">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
          {% if element.isSingleValue %}self.{{ element.variableName }} = [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding];{% else %}[{{ element.variableName }}Array addObject: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% /if %}
          _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = value;</value>
		</read>
	</simpletype>
    <simpletype name="anyURI" objType="NSURL" arrayType="NSURL[]">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSURL URLWithString:[NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
            <element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [NSURL URLWithString:[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% else %}[{{ element.variableName }}Array addObject: [NSURL URLWithString:[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]]];{% /if %}
                _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = [NSURL URLWithString:value];</value>
		</read>
	</simpletype>
	<simpletype name="boolean" objType="Bool" arrayType="Bool[]">
		<read>
			<prefix></prefix>
			<attribute>self.{{ attribute.variableName }} = [NSNumber numberWithBool: [[NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding] isEqualToString: @"true"]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
          self.{{ element.variableName }} = [NSNumber numberWithBool: [[NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding] isEqualToString: @"true"]];
          _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = [NSNumber numberWithBool: [value isEqualToString: @"true"]];</value>
		</read>
	</simpletype>
    <simpletype name="integer" objType="Int" arrayType="Int[]">
		<read>
			<prefix>NSNumberFormatter* numFormatter = [[NSNumberFormatter alloc] init];
    numFormatter.numberStyle = NSNumberFormatterDecimalStyle;</prefix>
			<attribute>self.{{ attribute.variableName }} = [numFormatter numberFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
                self.{{ element.variableName }} = [numFormatter numberFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];
                _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = [numFormatter numberFromString: value];</value>
		</read>
	</simpletype>
	<simpletype name="decimal" objType="Double" arrayType="Double[]">
		<read>
			<prefix>NSNumberFormatter* decFormatter = [[NSNumberFormatter alloc] init];
    decFormatter.decimalSeparator = @".";
    decFormatter.numberStyle = NSNumberFormatterDecimalStyle;</prefix>
			<attribute>self.{{ attribute.variableName }} = [decFormatter numberFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
                self.{{ element.variableName }} = [decFormatter numberFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];
                _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = [decFormatter numberFromString: value];</value>
		</read>
	</simpletype>
	<simpletype name="dateTime" objType="NSDate" arrayType="NSDate[]">
		<read>
			<prefix>NSDateFormatter* dateFormatter = [[NSDateFormatter alloc] init];
    dateFormatter.timeStyle = NSDateFormatterFullStyle;
    dateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ssZ";</prefix>
			<attribute>self.{{ attribute.variableName }} = [dateFormatter dateFromString: [NSString stringWithCString: {{ attribute.name }}AttrValue encoding: NSUTF8StringEncoding]];</attribute>
			<element><![CDATA[_readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);
                {% if element.isSingleValue %}self.{{ element.variableName }} = [dateFormatter dateFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]];{% else %}[{{ element.variableName }}Array addObject: [dateFormatter dateFromString: [NSString stringWithCString: (const char*) xmlTextReaderConstValue(reader) encoding: NSUTF8StringEncoding]]];{% /if %}
          _readerOk = xmlTextReaderRead(reader); _currentNodeType = xmlTextReaderNodeType(reader);]]></element>
            <value>NSString *value = [NSString stringWithCString: contentValue encoding: NSUTF8StringEncoding];
                value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                self.value = [dateFormatter dateFromString: value];</value>
		</read>
	</simpletype>
    
    <!--complex type-->
    <complextype arrayType="{{ type.targetClassName }}[]">
        <read>
            <element><![CDATA[{% if element.isSingleValue %}self.{{ element.variableName }} = {{ element.codeType }}(reader: reader){% else %}{{ element.variableName }}Array.addObject( {{ element.schemaType.targetClassName }}(reader: reader){% /if %}]]></element>
        </read>
    </complextype>

    <implementation>
        <header extension=""></header>
        <class extension="swift"><![CDATA[
class {{ type.targetClassName }} {
{% for attribute in type.attributes %}
    let {{ attribute.variableName }}: {{ attribute.codeType }}
{% /for %}
{% for element in type.elements %}    let {{ element.variableName }}: {{ element.codeType }}
{% /for %}
{% if type.hasSimpleBaseClass %}
    let value: {{ type.baseClassName }}{% /if %}

    func readAttributes(reader: xmlTextReaderPtr) {{% if type.hasComplexBaseClass %}
        super.readAttributes(reader: reader)
        {% /if %}{{ type.combinedReadPrefixCode }}
        {% for attribute in type.attributes %}  char* {{ attribute.name }}AttrValue = (char*) xmlTextReaderGetAttribute(reader, (xmlChar*)"{{ attribute.name }}");
        if({{ attribute.name }}AttrValue) {
            {{ attribute.readCodeForAttribute }}
        }{% /for %}
    }
    
    init(reader: xmlTextReaderPtr) {
    }
	    ]]></class>
    </implementation>
	<reader>
	   <header extension=""></header>
       <class extension="swift"><![CDATA[
import Foundation

extension {{ type.targetClassFileName }} {
    class func {{ type.name }}FromURL(url:NSURL) -> {{ type.targetClassName }}? {
        let s = (url.absoluteString! as NSString).UTF8String
        let reader = xmlReaderForFile( s, nil, 0/*options*/)

        if(reader != nil) {
        int ret = xmlTextReaderRead(reader);
            let ret = xmlTextReaderRead(reader)
            if(ret == 1/*XML_READER_TYPE_ELEMENT*/) {
                return {{ type.targetClassName }}(reader: reader)
            }
            xmlFreeTextReader(reader)
        }
        
        return nil
    }

    class func AddressFromFile(path:String) -> {{ type.targetClassName }}? {
        let url = NSURL(fileURLWithPath:path)
        return url != nil ? self.AddressFromURL(url!) : nil
    }

    class func AddressFromData(data:NSData) -> {{ type.targetClassName }}? {
        let bytes = UnsafePointer<Int8>(data.bytes)
        let length = Int32(data.length)
        let reader = xmlReaderForMemory(bytes, length, nil, nil, 0/*options*/)
        
        if(reader != nil) {
            let ret = xmlTextReaderRead(reader)
            if(ret > 0) {
                return {{ type.targetClassName }}(reader: reader)
            }
            xmlFreeTextReader(reader)
        }
        
        return nil
    }
}
		]]></class>
    </reader>
</template>